class("TutorialScreen").extends(Screen)

function TutorialScreen:init()
	TutorialScreen.super.init(self)

	self.grid = Grid(true)
	self.dialog = TutorialDialog()
end

local TUTORIAL = {
	{
		text = "Welcome! This tutorial will teach you how to solve nonogram puzzles.",
		grid = "000000000000000001000100000100001000100100100001000100000100001111100100100001000100100100001000100100100001000100100000001000100100100000000000000000",
	},
	{
		text = "Before we start, if this text box is in the way, hold (B) to hide it and see all the numbers.",
		grid = "000000000000000000011111100000000010000010000000010000010000000011111100000000010000010000000010000010000000010000010000000011111100000000000000000000",
	},
	{
		text = "In the game, press (A) to fill an empty square or press (A) again to clear it.",
		grid = "000000000000000000000111000000000001000100000000010000010000000010000010000000011111110000000010000010000000010000010000000010000010000000000000000000",
	},
	{
		text = "The numbers tell you the size and order of blocks in rows and columns that have to be filled.",
		grid = "000000000000000000000000000000001001110000000000001110000000001101110011100001101110011100000000000011100000000000000000000000000000000000000000000000",
	},
	{
		text = "However, they don’t tell you the position of the blocks. That’s for you to find out.",
		grid = "101101110111100010110111011110001011011101111101101110001111101100111001111100110111001111010110111001111010110011101111010011011101111001011011101111",
	},
	{
		text = "Some blocks are fixed, others have wiggle room and need to be checked against the other axis.",
		grid = "101010101010101000000000000000111000111000111000000000000000001100110011011000000000000000111111011111111000000000000000111111111111111000000000000000",
	},
	{
		text = "To aid you, numbers become thin if the corresponding block has been filled completely.",
		grid = "000000000000000000000000000000000000000000000011100111101110000000000000000011100111101110000000000000000011100111101110000000000000000000000000000000",
		solution = "000000000000000000000000000000000000000000000011100111000110000000000000000001100111101100000000000000000011000011101110000000000000000000000000000000",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "Be aware that this doesn’t mean that the position of the block is correct.",
		grid = "000000000000000000000000000000000000000000000011100111101110000000000000000011100111101110000000000000000011100111101110000000000000000000000000000000",
		solution = "000000000000000000000000000000000000000000000011100111000110000000000000000001100111101100000000000000000011000011101110000000000000000000000000000000",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "If it’s unclear which block has been filled, the number will stay bold.",
		grid = "000000000000000001110011100000000000000000000001110011100000000000000000000001110011100000000000000000000001110011100000000000000000000000000000000000",
		solution = "000000000000000111000000000000000000000000000001110000000000000000000000000000000011100000000000000000000000000000000111000000000000000000000000000000",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "And if a line contains an error, all numbers will become bold.",
		grid = "000000000000000000000000000000000000000000000001110011000000000000000000000001110011000000000000000000000000000000000000000000000000000000000000000000",
		solution = "000000000000000000000000000000000000000000000001110011000000000000000000000001110011001000000000000000000000000000000000000000000000000000000000000000",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "To mark a known empty square, press (B) to cross it out or press (B) again to clear it.",
		grid = "000001000000000000001000000000000001000000000000001000000000000001000000000111110111101111000000000000000000000000000000000000000000000000000000000000",
		solution = "000000000000000000000000000000000000000000000000000000000000000000000000000111112111121111000000000000000000000000000000000000000000000000000000000000",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "This can help to place blocks in the other axis.",
		grid = "000001000000000000001000000000000001000000000000001000000000000001000000000111110111101111000000000000000000000000000000000000000000000000000000000000",
		solution = "000001000000000000001000000000000001000000000000001000000000000001000000000111112111121111000000000000000000000000000000000000000000000000000000000000",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "To save you pointless clicking, known empty lines are crossed out automatically.",
		grid = "000000000000000000000000010000000000000010000000000000110000000000000100000000011001100000000001101000000000000111000000000000010000000000000000000000",
		solution = "222222222222222222200000002222222200000002222222200000002222222200000002222222200000002222222200000002222222200000002222222200000002222222222222222222",
		hints = HINTS_ID_BLOCKS,
	},
	{
		text = "You’re all set. Have fun playing the game!",
		grid = "000000000000000000000000010000000000000010000000000000110000000000000100000000011001100000000001101000000000000111000000000000010000000000000000000000",
		solution = "222222222222222222200000012222222200000012222222200000112222222200000102222222211001102222222201101002222222200111002222222200010002222222222222222222",
		hints = HINTS_ID_BLOCKS,
	}
}

function TutorialScreen:enter(context)
	self.step = 1
	self:loadStep()
end

function TutorialScreen:leave()
	self.grid:leave()
	self.dialog:leave()
end

function TutorialScreen:loadStep()
	 self.puzzle = Puzzle({
		 width = 15,
		 height = 10,
		 grid = TUTORIAL[self.step].grid or GRID_EMPTY
	})
	local solution = nil
	local step = TUTORIAL[self.step]
	local stepSolution = step.solution or step.grid
	if stepSolution then
		solution = table.create(150, 0)
		local values = {string.byte(stepSolution, 1, 150)}
		for i = 1, 150 do
			solution[i] = values[i] - 48
		end
	end
	self.grid:enter(self.puzzle, MODE_TUTORIAL, step.hints or HINTS_ID_OFF, solution)
	self.grid:hideCursor()
	self.dialog:enter(step.text)
end

function TutorialScreen:AButtonDown()
	if self.step < #TUTORIAL then
		self.step += 1
		self:loadStep()
	end
end

function TutorialScreen:BButtonDown()
	self.dialog:setVisible(false)
end

function TutorialScreen:BButtonUp()
	self.dialog:setVisible(true)
end

function TutorialScreen:leftButtonDown(pressed)
	if self.step > 1 then
		self.step -= 1
		self:loadStep()
	end
end

function TutorialScreen:rightButtonDown(pressed)
	if self.step < #TUTORIAL then
		self.step += 1
		self:loadStep()
	end
end
